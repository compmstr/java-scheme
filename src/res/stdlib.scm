(define (caar obj) (car (car obj)))
(define (cadr obj) (car (cdr obj)))
(define (cddr obj) (cdr (cdr obj)))
(define (cdar obj) (cdr (car obj)))
(define (caaar obj) (car (car (car obj))))
(define (caadr obj) (car (car (cdr obj))))
(define (cadar obj) (car (cdr (car obj))))
(define (caddr obj) (car (cdr (cdr obj))))
(define (cdddr obj) (cdr (cdr (cdr obj))))
(define (cdaar obj) (cdr (car (car obj))))
(define (cddar obj) (cdr (cdr (car obj))))

(define (inc x)
  (+ x 1))
(define (dec x)
  (- x 1))

(define (fact x)
  (if (= x 0)
    1
    (* x (fact (dec x)))))

;(define (range x)
  ;(range-recur 0 x))

;(define (range-recur cur target)
  ;(if (= cur target)
    ;'()
    ;(cons cur (range-recur (inc cur) target))))

;(define (range2 start len)
  ;(map
    ;(lambda x (+ start x))
    ;(range len)))

(define (range end)
  (let ((accum '())
        (cur (dec end)))
    (while (>= cur 0)
      (set! accum (cons cur accum))
      (set! cur (dec cur)))
    accum))

(define (range2 start count)
  (let ((end (dec (+ start count))))
    (let ((accum '())
          (cur end))
      (while (>= cur start)
        (set! accum (cons cur accum))
        (set! cur (dec cur)))
      accum)))

(define (count lst)
  (let ((i 0)
        (sublst lst))
    (while (not (empty? sublst))
      (set! i (inc i))
      (set! sublst (cdr sublst))
    i)))

;(define (map func lst)
  ;(if (empty? (cdr lst))
    ;(list (func (car lst)))
    ;(cons (func (car lst)) (map func (cdr lst)))))
(define (map func lst)
  (let ((accum (vector))
        (i 0))
    (while (< i (count lst))
      (vector-add! accum (func (nth lst i)))
      (set! i (inc i))
    (vector->list accum))))

;(define (filter func lst)
  ;(if (empty? (cdr lst))
    ;(if (func (car lst))
      ;(list (car lst))
      ;'())
    ;(if (func (car lst))
      ;(cons (car lst) (filter func (cdr lst)))
      ;(filter func (cdr lst)))))
(define (filter func lst)
  (let ((accum (vector))
        (i 0))
    (while (< i (count lst))
      (let ((item (nth lst i)))
        (if (func item)
          (vector-add! accum item)))
      (set! i (inc i)))
    accum))

;(define (nth lst x)
  ;(if (= x 0)
    ;(car lst)
    ;(nth (cdr lst) (dec x))))
(define (nth lst x)
  (if (< x 0)
    '()
    (let ((i 0)
          (sublst lst))
      (while (< i x)
        (set! i (inc i))
        (set! sublst (cdr sublst)))
      (car sublst))))
      
(define (not x)
  (if x #f #t))

(define (even? x)
  (= (remainder x 2) 0))

(define (odd? x)
  (not (even? x)))

(define (myconcat lst item)
  (if (empty? lst)
    item
    (cons (car lst) 
          (myconcat (cdr lst) item))))

(define (empty? lst)
  (eq? lst '()))

;(define (pow n exp)
  ;(if (= exp 2)
    ;(* n n)
    ;(if (< exp 2)
      ;1
      ;(* n (pow n (dec exp))))))
(define (pow n exp)
  (let ((accum n)
        (i (dec exp)))
    (while (> i 0)
      (set! accum (* accum n))
      (set! i (dec i)))
    accum))

